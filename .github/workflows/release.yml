name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Build Electron App for Windows
        run: npm run build:windows
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Zip Windows Build
        run: Compress-Archive -Path build/* -DestinationPath windows-build.zip

      - name: Upload Windows Build
        uses: actions/upload-artifact@v2
        with:
          name: windows-app
          path: windows-build.zip

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Build Electron App for Linux
        run: npm run build:linux
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Zip Linux Build
        run: zip -r linux-app.zip build/*

      - name: Upload Linux Build
        uses: actions/upload-artifact@v2
        with:
          name: linux-app
          path: linux-app.zip

  build-mac:
    runs-on: macOS-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Build Electron App for macOS
        run: npm run build:mac -- --publish=never
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Zip macOS Build
        run: zip -r macos-app.zip build/*

      - name: Upload macOS Build
        uses: actions/upload-artifact@v2
        with:
          name: macos-app
          path: macos-app.zip

  release:
    needs: [build-windows, build-linux, build-mac]
    runs-on: ubuntu-latest

    steps:
      - name: Download all builds
        uses: actions/download-artifact@v2

      # Create the GitHub release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      # Upload the assets
      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-app.zip
          asset_name: windows-app.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Upload Linux Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux-app.zip
          asset_name: linux-app.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Upload macOS Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-app.zip
          asset_name: macos-app.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
